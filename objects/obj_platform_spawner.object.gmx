<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise Variables &amp; Spawn 1st Platform

platform_speed = -4; // initial platform speed
tile_size = 64; // grid size for placing the platforms
max_platform_height = 4 // max spawn height of platforms (* tile_size)
min_platform_height = 3 // min spawn height of platforms (* tile_size)

// distance code
max_x_dist = 3; // max horizontal distance between platforms
min_x_dist = 0; // min horizontal distance between platforms
max_y_dist = 2; // max vertical distance between platforms

// platform code
platform_inst = instance_create(0, tile_size * ceil (0.5 * (room_height / tile_size)), obj_platform);
platform_inst.hsp = platform_speed;
platform_inst.image_xscale = ceil(room_width/tile_size); // stretch the first platform so we have time to prepare for the first jump
platform_inst.image_yscale = room_height div tile_size; // stretch it downwards out of the screen

// timer code
lvl_timer = 0; // counter to keep track of when to increase difficulty
lvl_time = 700; // interval for increasing difficulty (steps. for time, use room_speed * seconds)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// check if the right end of a platform is about to enter the room, if so, create a new platform.
if (platform_inst.bbox_right &lt; (room_width + tile_size)) {
    // get a random x distance
    var x_distance = tile_size * irandom_range(min_x_dist, max_x_dist);
    // add random distance to platform's x value
    var x_spawn = platform_inst.bbox_right + x_distance;
    
    // get random y distance
    var y_distance = tile_size * irandom_range(-max_y_dist, max_y_dist);
    // get min y value
    var min_y_spawn = tile_size * max_platform_height;
    // get max y value
    var max_y_spawn = tile_size * floor(room_height / tile_size);
    // add random distance to last platform's y value and keep within range
    var y_spawn = clamp(platform_inst.y + y_distance, min_y_spawn, max_y_spawn);
    
    // Create a new platform and replace the id stored in platform_inst with the new id
    platform_inst = instance_create(x_spawn, y_spawn, obj_platform);
    // give the new platform the current platform seed
    platform_inst.hsp = platform_speed;
    // give the platform a random length
    platform_inst.image_xscale = 1 + irandom(10);
    // stretch the platform so it extends below the bottom of the room
    platform_inst.image_yscale = room_height div tile_size;
}

// increasing the difficulty
if (lvl_timer &gt; lvl_time) {
    lvl_timer = 0;
    platform_speed--; // -- because we're moving left
    with (obj_platform) {
        hsp--;
    }
} else {
    lvl_timer++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
